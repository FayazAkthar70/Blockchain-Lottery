{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "raffleState",
          "type": "uint256"
        }
      ],
      "name": "Raffle__UpkeepNotNeeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "lotteryNotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "lotteryTransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "sendMoreETH",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "lotteryEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "requestLotteryWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "winnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterLottery",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLotteryState",
      "outputs": [
        {
          "internalType": "enum Lottery.LotteryState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x39a01afbe2bc1008118937b3fbe95a78573fd9bf522784e67d5389929ecca6c6",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "1196827",
    "logsBloom": "0x
    "blockHash": "0x6f5c023ecd9aba2bfc1c657221e14eca6706b35ea62b141f3e05b7595d64c58a",
    "transactionHash": "0x39a01afbe2bc1008118937b3fbe95a78573fd9bf522784e67d5389929ecca6c6",
    "logs": [],
    "blockNumber": 4,
    "cumulativeGasUsed": "1196827",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "1",
    "0x474e34a077df58807dbe9c96d3c009b23b3c6d0cce433e59bbf5b34f823bc56c",
    "30",
    "10000000000000000",
    "500000"
  ],
  "numDeployments": 1,
  "solcInputHash": "2ac1acba7e53c21777f92256e6580671",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffleState\",\"type\":\"uint256\"}],\"name\":\"Raffle__UpkeepNotNeeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"lotteryNotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"lotteryTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"sendMoreETH\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"lotteryEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"requestLotteryWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"winnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterLottery\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLotteryState\",\"outputs\":[{\"internalType\":\"enum Lottery.LotteryState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Lottery.sol\":\"Lottery\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xb6577cda6b731b655aebcb6e3c24f8658d3f4c5eda07200622d07d4570af33ea\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"contracts/Lottery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\n\\nerror sendMoreETH();\\nerror lotteryTransferFailed();\\nerror lotteryNotOpen();\\nerror Raffle__UpkeepNotNeeded(\\n    uint256 currentBalance,\\n    uint256 numPlayers,\\n    uint256 raffleState\\n);\\n\\ncontract Lottery is VRFConsumerBaseV2, KeeperCompatibleInterface {\\n    enum LotteryState {\\n        OPEN,\\n        CALCULATING\\n    }\\n    //chainlink VRF Variables\\n    VRFCoordinatorV2Interface private immutable i_vrfcoordinator;\\n    bytes32 private immutable i_keyHash;\\n    uint64 private immutable i_subscriptionId;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint32 private constant NUM_WORDS = 1;\\n\\n    //Lottery Variables\\n    uint256 private immutable i_entranceFee;\\n    address[] private players;\\n    address private recentWinner;\\n    LotteryState private lotteryState;\\n    uint256 private lastTimeStamp;\\n    uint256 private immutable i_interval;\\n\\n    event lotteryEnter(address indexed player);\\n    event requestLotteryWinner(uint256 indexed requestId);\\n    event winnerPicked(address indexed winner);\\n\\n    constructor(\\n        address vrfCoordinatorV2,\\n        uint64 subscriptionId,\\n        bytes32 gasLane, // keyHash\\n        uint256 interval,\\n        uint256 entranceFee,\\n        uint32 callbackGasLimit\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        i_vrfcoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_keyHash = gasLane;\\n        i_interval = interval;\\n        i_subscriptionId = subscriptionId;\\n        i_entranceFee = entranceFee;\\n        lotteryState = LotteryState.OPEN;\\n        lastTimeStamp = block.timestamp;\\n        i_callbackGasLimit = callbackGasLimit;\\n    }\\n\\n    function enterLottery() public payable {\\n        if (msg.value < i_entranceFee) {\\n            revert sendMoreETH();\\n        }\\n        if (lotteryState != LotteryState.OPEN) {\\n            revert lotteryNotOpen();\\n        }\\n        players.push(payable(msg.sender));\\n        emit lotteryEnter(msg.sender);\\n    }\\n\\n    function checkUpkeep(\\n        bytes memory /* checkData */\\n    )\\n        public\\n        view\\n        override\\n        returns (bool upkeepNeeded, bytes memory /* performData */)\\n    {\\n        bool isOpen = LotteryState.OPEN == lotteryState;\\n        bool timePassed = ((block.timestamp - lastTimeStamp) > i_interval);\\n        bool hasPlayers = players.length > 0;\\n        bool hasBalance = address(this).balance > 0;\\n        upkeepNeeded = (timePassed && isOpen && hasBalance && hasPlayers);\\n        return (upkeepNeeded, \\\"0x0\\\"); // can we comment this out?\\n    }\\n\\n    function performUpkeep(bytes calldata /* performData */) external override {\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\n        // require(upkeepNeeded, \\\"Upkeep not needed\\\");\\n        if (!upkeepNeeded) {\\n            revert Raffle__UpkeepNotNeeded(\\n                address(this).balance,\\n                players.length,\\n                uint256(lotteryState)\\n            );\\n        }\\n        lotteryState = LotteryState.CALCULATING;\\n        uint256 requestId = i_vrfcoordinator.requestRandomWords(\\n            i_keyHash,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            NUM_WORDS\\n        );\\n\\n        emit requestLotteryWinner(requestId);\\n    }\\n\\n    function fulfillRandomWords(\\n        uint256, //**requestId\\n        uint256[] memory randomWords\\n    ) internal override {\\n        uint256 winnerIndex = randomWords[0] % players.length;\\n        recentWinner = players[winnerIndex];\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        if (!callSuccess) {\\n            revert lotteryTransferFailed();\\n        }\\n        lotteryState = LotteryState.OPEN;\\n        players = new address payable[](0);\\n        lastTimeStamp = block.timestamp;\\n        emit winnerPicked(recentWinner);\\n    }\\n\\n    function getPlayer(uint index) public view returns (address) {\\n        return players[index];\\n    }\\n\\n    function getRecentWinner() public view returns (address) {\\n        return recentWinner;\\n    }\\n\\n    function getLotteryState() public view returns (LotteryState) {\\n        return lotteryState;\\n    }\\n\\n    function getLastTimeStamp() public view returns (uint256) {\\n        return lastTimeStamp;\\n    }\\n\\n    function getInterval() public view returns (uint256) {\\n        return i_interval;\\n    }\\n\\n    function getEntranceFee() public view returns (uint256) {\\n        return i_entranceFee;\\n    }\\n\\n    function getNumberOfPlayers() public view returns (uint256) {\\n        return players.length;\\n    }\\n}\\n\",\"keccak256\":\"0x14e9c083400d21f10badb852b2b16e5d8f5a0bbab00f3bd88d7cb4e1677a840a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b50604051620017f9380380620017f98339818101604052810190620000389190620001ad565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050508573ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508360c081815250508261014081815250508467ffffffffffffffff1660e08167ffffffffffffffff1660c01b815250508161012081815250506000600160146101000a81548160ff021916908360018111156200010a5762000109620002b5565b5b0217905550426002819055508063ffffffff166101008163ffffffff1660e01b815250505050505050506200036b565b6000815190506200014b81620002e9565b92915050565b600081519050620001628162000303565b92915050565b60008151905062000179816200031d565b92915050565b600081519050620001908162000337565b92915050565b600081519050620001a78162000351565b92915050565b60008060008060008060c08789031215620001cd57620001cc620002e4565b5b6000620001dd89828a016200013a565b9650506020620001f089828a0162000196565b95505060406200020389828a0162000151565b94505060606200021689828a0162000168565b93505060806200022989828a0162000168565b92505060a06200023c89828a016200017f565b9150509295509295509295565b6000620002568262000267565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600080fd5b620002f48162000249565b81146200030057600080fd5b50565b6200030e816200025d565b81146200031a57600080fd5b50565b620003288162000287565b81146200033457600080fd5b50565b620003428162000291565b81146200034e57600080fd5b50565b6200035c81620002a1565b81146200036857600080fd5b50565b60805160601c60a05160601c60c05160e05160c01c6101005160e01c6101205161014051611412620003e7600039600081816105e5015261068e01526000818161027e01526106b4015260006104990152600061047601526000610455015260006104190152600081816102a401526102f801526114126000f3fe60806040526004361061009c5760003560e01c80636e04ff0d116100645780636e04ff0d1461017457806391ad27b4146101b2578063c1af5785146101dd578063c1c244e8146101e7578063e55ae4e814610212578063fd6673f51461024f5761009c565b806309bc33a7146100a15780631fe543e3146100cc5780634585e33b146100f5578063473f1ddc1461011e5780636b68c03c14610149575b600080fd5b3480156100ad57600080fd5b506100b661027a565b6040516100c39190611018565b60405180910390f35b3480156100d857600080fd5b506100f360048036038101906100ee9190610df1565b6102a2565b005b34801561010157600080fd5b5061011c60048036038101906101179190610d01565b610362565b005b34801561012a57600080fd5b50610133610561565b6040516101409190610f36565b60405180910390f35b34801561015557600080fd5b5061015e61058b565b60405161016b9190610ffd565b60405180910390f35b34801561018057600080fd5b5061019b60048036038101906101969190610d4e565b6105a2565b6040516101a9929190610f7a565b60405180910390f35b3480156101be57600080fd5b506101c761068a565b6040516101d49190611018565b60405180910390f35b6101e56106b2565b005b3480156101f357600080fd5b506101fc610821565b6040516102099190611018565b60405180910390f35b34801561021e57600080fd5b5061023960048036038101906102349190610d97565b61082b565b6040516102469190610f36565b60405180910390f35b34801561025b57600080fd5b50610264610872565b6040516102719190611018565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461035457337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161034b929190610f51565b60405180910390fd5b61035e828261087e565b5050565b600061037c604051806020016040528060008152506105a2565b509050806103eb5747600080549050600160149054906101000a900460ff1660018111156103ad576103ac6112f2565b5b6040517f584327aa0000000000000000000000000000000000000000000000000000000081526004016103e293929190611033565b60405180910390fd5b60018060146101000a81548160ff021916908360018111156104105761040f6112f2565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016104da959493929190610faa565b602060405180830381600087803b1580156104f457600080fd5b505af1158015610508573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052c9190610dc4565b9050807fed81d7c6d243af55a11a80e2e1ff815881e816981f9a54d57713923bfd60966460405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600160149054906101000a900460ff16905090565b600060606000600160149054906101000a900460ff1660018111156105ca576105c96112f2565b5b600060018111156105de576105dd6112f2565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600254426106129190611113565b119050600080600080549050119050600080471190508280156106325750835b801561063b5750805b80156106445750815b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000034101561070c576040517f15823fa100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156107205761071f6112f2565b5b600160149054906101000a900460ff166001811115610742576107416112f2565b5b14610779576040517fc1934d5300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f6ba87006f2c53f2d227d45b3400034f16dbf4f6842816c4880d30170f3a6a16060405160405180910390a2565b6000600254905090565b60008082815481106108405761083f611321565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050905090565b600080805490508260008151811061089957610898611321565b5b60200260200101516108ab9190611263565b9050600081815481106108c1576108c0611321565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060003373ffffffffffffffffffffffffffffffffffffffff164760405161095290610f21565b60006040518083038185875af1925050503d806000811461098f576040519150601f19603f3d011682016040523d82523d6000602084013e610994565b606091505b50509050806109cf576040517fb57f99a300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600160146101000a81548160ff021916908360018111156109f5576109f46112f2565b5b0217905550600067ffffffffffffffff811115610a1557610a14611350565b5b604051908082528060200260200182016040528015610a435781602001602082028036833780820191505090505b5060009080519060200190610a59929190610acc565b5042600281905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f794919b0f484b8e90b1b817ac7f880f846fbd8a9813dee2a378e820db094e3d160405160405180910390a250505050565b828054828255906000526020600020908101928215610b45579160200282015b82811115610b445782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610aec565b5b509050610b529190610b56565b5090565b5b80821115610b6f576000816000905550600101610b57565b5090565b6000610b86610b818461108f565b61106a565b90508083825260208201905082856020860282011115610ba957610ba8611389565b5b60005b85811015610bd95781610bbf8882610cd7565b845260208401935060208301925050600181019050610bac565b5050509392505050565b6000610bf6610bf1846110bb565b61106a565b905082815260208101848484011115610c1257610c1161138e565b5b610c1d8482856111f0565b509392505050565b600082601f830112610c3a57610c39611384565b5b8135610c4a848260208601610b73565b91505092915050565b60008083601f840112610c6957610c68611384565b5b8235905067ffffffffffffffff811115610c8657610c8561137f565b5b602083019150836001820283011115610ca257610ca1611389565b5b9250929050565b600082601f830112610cbe57610cbd611384565b5b8135610cce848260208601610be3565b91505092915050565b600081359050610ce6816113c5565b92915050565b600081519050610cfb816113c5565b92915050565b60008060208385031215610d1857610d17611398565b5b600083013567ffffffffffffffff811115610d3657610d35611393565b5b610d4285828601610c53565b92509250509250929050565b600060208284031215610d6457610d63611398565b5b600082013567ffffffffffffffff811115610d8257610d81611393565b5b610d8e84828501610ca9565b91505092915050565b600060208284031215610dad57610dac611398565b5b6000610dbb84828501610cd7565b91505092915050565b600060208284031215610dda57610dd9611398565b5b6000610de884828501610cec565b91505092915050565b60008060408385031215610e0857610e07611398565b5b6000610e1685828601610cd7565b925050602083013567ffffffffffffffff811115610e3757610e36611393565b5b610e4385828601610c25565b9150509250929050565b610e5681611147565b82525050565b610e6581611159565b82525050565b610e7481611165565b82525050565b6000610e85826110ec565b610e8f81856110f7565b9350610e9f8185602086016111ff565b610ea88161139d565b840191505092915050565b610ebc816111de565b82525050565b6000610ecf600083611108565b9150610eda826113ae565b600082019050919050565b610eee81611182565b82525050565b610efd816111b0565b82525050565b610f0c816111ba565b82525050565b610f1b816111ca565b82525050565b6000610f2c82610ec2565b9150819050919050565b6000602082019050610f4b6000830184610e4d565b92915050565b6000604082019050610f666000830185610e4d565b610f736020830184610e4d565b9392505050565b6000604082019050610f8f6000830185610e5c565b8181036020830152610fa18184610e7a565b90509392505050565b600060a082019050610fbf6000830188610e6b565b610fcc6020830187610f12565b610fd96040830186610ee5565b610fe66060830185610f03565b610ff36080830184610f03565b9695505050505050565b60006020820190506110126000830184610eb3565b92915050565b600060208201905061102d6000830184610ef4565b92915050565b60006060820190506110486000830186610ef4565b6110556020830185610ef4565b6110626040830184610ef4565b949350505050565b6000611074611085565b90506110808282611232565b919050565b6000604051905090565b600067ffffffffffffffff8211156110aa576110a9611350565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156110d6576110d5611350565b5b6110df8261139d565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600061111e826111b0565b9150611129836111b0565b92508282101561113c5761113b611294565b5b828203905092915050565b600061115282611190565b9050919050565b60008115159050919050565b6000819050919050565b600081905061117d826113b1565b919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b60006111e98261116f565b9050919050565b82818337600083830152505050565b60005b8381101561121d578082015181840152602081019050611202565b8381111561122c576000848401525b50505050565b61123b8261139d565b810181811067ffffffffffffffff8211171561125a57611259611350565b5b80604052505050565b600061126e826111b0565b9150611279836111b0565b925082611289576112886112c3565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b50565b600281106113c2576113c16112f2565b5b50565b6113ce816111b0565b81146113d957600080fd5b5056fea2646970667358221220c51d23b288392dad1c1f845915379c9a30f116072a9602fcebd06967eca284c564736f6c63430008070033",
  "deployedBytecode": "0x60806040526004361061009c5760003560e01c80636e04ff0d116100645780636e04ff0d1461017457806391ad27b4146101b2578063c1af5785146101dd578063c1c244e8146101e7578063e55ae4e814610212578063fd6673f51461024f5761009c565b806309bc33a7146100a15780631fe543e3146100cc5780634585e33b146100f5578063473f1ddc1461011e5780636b68c03c14610149575b600080fd5b3480156100ad57600080fd5b506100b661027a565b6040516100c39190611018565b60405180910390f35b3480156100d857600080fd5b506100f360048036038101906100ee9190610df1565b6102a2565b005b34801561010157600080fd5b5061011c60048036038101906101179190610d01565b610362565b005b34801561012a57600080fd5b50610133610561565b6040516101409190610f36565b60405180910390f35b34801561015557600080fd5b5061015e61058b565b60405161016b9190610ffd565b60405180910390f35b34801561018057600080fd5b5061019b60048036038101906101969190610d4e565b6105a2565b6040516101a9929190610f7a565b60405180910390f35b3480156101be57600080fd5b506101c761068a565b6040516101d49190611018565b60405180910390f35b6101e56106b2565b005b3480156101f357600080fd5b506101fc610821565b6040516102099190611018565b60405180910390f35b34801561021e57600080fd5b5061023960048036038101906102349190610d97565b61082b565b6040516102469190610f36565b60405180910390f35b34801561025b57600080fd5b50610264610872565b6040516102719190611018565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461035457337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161034b929190610f51565b60405180910390fd5b61035e828261087e565b5050565b600061037c604051806020016040528060008152506105a2565b509050806103eb5747600080549050600160149054906101000a900460ff1660018111156103ad576103ac6112f2565b5b6040517f584327aa0000000000000000000000000000000000000000000000000000000081526004016103e293929190611033565b60405180910390fd5b60018060146101000a81548160ff021916908360018111156104105761040f6112f2565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016104da959493929190610faa565b602060405180830381600087803b1580156104f457600080fd5b505af1158015610508573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052c9190610dc4565b9050807fed81d7c6d243af55a11a80e2e1ff815881e816981f9a54d57713923bfd60966460405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600160149054906101000a900460ff16905090565b600060606000600160149054906101000a900460ff1660018111156105ca576105c96112f2565b5b600060018111156105de576105dd6112f2565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600254426106129190611113565b119050600080600080549050119050600080471190508280156106325750835b801561063b5750805b80156106445750815b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000034101561070c576040517f15823fa100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156107205761071f6112f2565b5b600160149054906101000a900460ff166001811115610742576107416112f2565b5b14610779576040517fc1934d5300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f6ba87006f2c53f2d227d45b3400034f16dbf4f6842816c4880d30170f3a6a16060405160405180910390a2565b6000600254905090565b60008082815481106108405761083f611321565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050905090565b600080805490508260008151811061089957610898611321565b5b60200260200101516108ab9190611263565b9050600081815481106108c1576108c0611321565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060003373ffffffffffffffffffffffffffffffffffffffff164760405161095290610f21565b60006040518083038185875af1925050503d806000811461098f576040519150601f19603f3d011682016040523d82523d6000602084013e610994565b606091505b50509050806109cf576040517fb57f99a300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600160146101000a81548160ff021916908360018111156109f5576109f46112f2565b5b0217905550600067ffffffffffffffff811115610a1557610a14611350565b5b604051908082528060200260200182016040528015610a435781602001602082028036833780820191505090505b5060009080519060200190610a59929190610acc565b5042600281905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f794919b0f484b8e90b1b817ac7f880f846fbd8a9813dee2a378e820db094e3d160405160405180910390a250505050565b828054828255906000526020600020908101928215610b45579160200282015b82811115610b445782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610aec565b5b509050610b529190610b56565b5090565b5b80821115610b6f576000816000905550600101610b57565b5090565b6000610b86610b818461108f565b61106a565b90508083825260208201905082856020860282011115610ba957610ba8611389565b5b60005b85811015610bd95781610bbf8882610cd7565b845260208401935060208301925050600181019050610bac565b5050509392505050565b6000610bf6610bf1846110bb565b61106a565b905082815260208101848484011115610c1257610c1161138e565b5b610c1d8482856111f0565b509392505050565b600082601f830112610c3a57610c39611384565b5b8135610c4a848260208601610b73565b91505092915050565b60008083601f840112610c6957610c68611384565b5b8235905067ffffffffffffffff811115610c8657610c8561137f565b5b602083019150836001820283011115610ca257610ca1611389565b5b9250929050565b600082601f830112610cbe57610cbd611384565b5b8135610cce848260208601610be3565b91505092915050565b600081359050610ce6816113c5565b92915050565b600081519050610cfb816113c5565b92915050565b60008060208385031215610d1857610d17611398565b5b600083013567ffffffffffffffff811115610d3657610d35611393565b5b610d4285828601610c53565b92509250509250929050565b600060208284031215610d6457610d63611398565b5b600082013567ffffffffffffffff811115610d8257610d81611393565b5b610d8e84828501610ca9565b91505092915050565b600060208284031215610dad57610dac611398565b5b6000610dbb84828501610cd7565b91505092915050565b600060208284031215610dda57610dd9611398565b5b6000610de884828501610cec565b91505092915050565b60008060408385031215610e0857610e07611398565b5b6000610e1685828601610cd7565b925050602083013567ffffffffffffffff811115610e3757610e36611393565b5b610e4385828601610c25565b9150509250929050565b610e5681611147565b82525050565b610e6581611159565b82525050565b610e7481611165565b82525050565b6000610e85826110ec565b610e8f81856110f7565b9350610e9f8185602086016111ff565b610ea88161139d565b840191505092915050565b610ebc816111de565b82525050565b6000610ecf600083611108565b9150610eda826113ae565b600082019050919050565b610eee81611182565b82525050565b610efd816111b0565b82525050565b610f0c816111ba565b82525050565b610f1b816111ca565b82525050565b6000610f2c82610ec2565b9150819050919050565b6000602082019050610f4b6000830184610e4d565b92915050565b6000604082019050610f666000830185610e4d565b610f736020830184610e4d565b9392505050565b6000604082019050610f8f6000830185610e5c565b8181036020830152610fa18184610e7a565b90509392505050565b600060a082019050610fbf6000830188610e6b565b610fcc6020830187610f12565b610fd96040830186610ee5565b610fe66060830185610f03565b610ff36080830184610f03565b9695505050505050565b60006020820190506110126000830184610eb3565b92915050565b600060208201905061102d6000830184610ef4565b92915050565b60006060820190506110486000830186610ef4565b6110556020830185610ef4565b6110626040830184610ef4565b949350505050565b6000611074611085565b90506110808282611232565b919050565b6000604051905090565b600067ffffffffffffffff8211156110aa576110a9611350565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156110d6576110d5611350565b5b6110df8261139d565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600061111e826111b0565b9150611129836111b0565b92508282101561113c5761113b611294565b5b828203905092915050565b600061115282611190565b9050919050565b60008115159050919050565b6000819050919050565b600081905061117d826113b1565b919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b60006111e98261116f565b9050919050565b82818337600083830152505050565b60005b8381101561121d578082015181840152602081019050611202565b8381111561122c576000848401525b50505050565b61123b8261139d565b810181811067ffffffffffffffff8211171561125a57611259611350565b5b80604052505050565b600061126e826111b0565b9150611279836111b0565b925082611289576112886112c3565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b50565b600281106113c2576113c16112f2565b5b50565b6113ce816111b0565b81146113d957600080fd5b5056fea2646970667358221220c51d23b288392dad1c1f845915379c9a30f116072a9602fcebd06967eca284c564736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 218,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "players",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 220,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "recentWinner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 223,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "lotteryState",
        "offset": 20,
        "slot": "1",
        "type": "t_enum(LotteryState)198"
      },
      {
        "astId": 225,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "lastTimeStamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_enum(LotteryState)198": {
        "encoding": "inplace",
        "label": "enum Lottery.LotteryState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}