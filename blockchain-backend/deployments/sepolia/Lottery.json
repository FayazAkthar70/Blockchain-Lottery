{
  "address": "0xd4d959498730A28177Af3357E3C953e678d26B03",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "keyHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "raffleState",
          "type": "uint256"
        }
      ],
      "name": "Raffle__UpkeepNotNeeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "lotteryNotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "lotteryTransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "sendMoreETH",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "lotteryEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "requestLotteryWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "winnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterLottery",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntraceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLotteryState",
      "outputs": [
        {
          "internalType": "enum Lottery.LotteryState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x05055d2e64dda28ce88be41c260d1c609e5cee50ad75b7a3cb6746f2300e0852",
  "receipt": {
    "to": null,
    "from": "0x91a110037FF22b3Cc5F0e864b8bF1D03c3ab0567",
    "contractAddress": "0xd4d959498730A28177Af3357E3C953e678d26B03",
    "transactionIndex": 24,
    "gasUsed": "1216864",
    "logsBloom": "0x
    "blockHash": "0xd44a9390a1ae36fe918b95b9fa51fc0629a0205d051a844555ec337b71f55923",
    "transactionHash": "0x05055d2e64dda28ce88be41c260d1c609e5cee50ad75b7a3cb6746f2300e0852",
    "logs": [],
    "blockNumber": 3281797,
    "cumulativeGasUsed": "3441962",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8103B0A8A00be2DDC778e6e7eaa21791Cd364625",
    "6926",
    "0x474e34a077df58807dbe9c96d3c009b23b3c6d0cce433e59bbf5b34f823bc56c",
    "30",
    "10000000000000000",
    "500000"
  ],
  "numDeployments": 1,
  "solcInputHash": "9dfd6bead543cdcc746531fc6b6300f6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffleState\",\"type\":\"uint256\"}],\"name\":\"Raffle__UpkeepNotNeeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"lotteryNotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"lotteryTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"sendMoreETH\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"lotteryEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"requestLotteryWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"winnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterLottery\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntraceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLotteryState\",\"outputs\":[{\"internalType\":\"enum Lottery.LotteryState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Lottery.sol\":\"Lottery\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"contracts/Lottery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\\\";\\n\\nerror sendMoreETH();\\nerror lotteryTransferFailed();\\nerror lotteryNotOpen();\\nerror Raffle__UpkeepNotNeeded(\\n    uint256 currentBalance,\\n    uint256 numPlayers,\\n    uint256 raffleState\\n);\\n\\ncontract Lottery is VRFConsumerBaseV2, AutomationCompatibleInterface {\\n    enum LotteryState {\\n        OPEN,\\n        CALCULATING\\n    }\\n    //chainlink VRF Variables\\n    VRFCoordinatorV2Interface private immutable i_vrfcoordinator;\\n    bytes32 private immutable i_keyHash;\\n    uint64 private immutable i_subscriptionId;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint32 private constant NUM_WORDS = 1;\\n\\n    //Lottery Variables\\n    uint256 private immutable i_entranceFee;\\n    address[] private players;\\n    address private recentWinner;\\n    LotteryState private lotteryState;\\n    uint256 private lastTimeStamp;\\n    uint256 private immutable i_interval;\\n\\n    event lotteryEnter(address indexed player);\\n    event requestLotteryWinner(uint256 indexed id);\\n    event winnerPicked(address indexed winner);\\n\\n    constructor(\\n        address vrfCoordinatorV2,\\n        uint256 entranceFee,\\n        bytes32 keyHash,\\n        uint256 interval,\\n        uint64 subscriptionId,\\n        uint32 callbackGasLimit\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        i_vrfcoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_entranceFee = entranceFee;\\n        i_keyHash = keyHash;\\n        i_interval = interval;\\n        i_subscriptionId = subscriptionId;\\n        i_callbackGasLimit = callbackGasLimit;\\n        lotteryState = LotteryState.OPEN;\\n        lastTimeStamp = block.timestamp;\\n    }\\n\\n    function enterLottery() public payable {\\n        if (msg.value < i_entranceFee) {\\n            revert sendMoreETH();\\n        }\\n        if (lotteryState != LotteryState.OPEN) {\\n            revert lotteryNotOpen();\\n        }\\n        players.push(payable(msg.sender));\\n        emit lotteryEnter(msg.sender);\\n    }\\n\\n    function checkUpkeep(\\n        bytes memory /* checkData */\\n    )\\n        public\\n        view\\n        override\\n        returns (bool upkeepNeeded, bytes memory /* performData */)\\n    {\\n        bool isOpen = LotteryState.OPEN == lotteryState;\\n        bool timePassed = ((block.timestamp - lastTimeStamp) > i_interval);\\n        bool hasPlayers = players.length > 0;\\n        bool hasBalance = address(this).balance > 0;\\n        upkeepNeeded = (timePassed && isOpen && hasBalance && hasPlayers);\\n        return (upkeepNeeded, \\\"0x0\\\"); // can we comment this out?\\n    }\\n\\n    function performUpkeep(bytes calldata /* performData */) external override {\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\n        // require(upkeepNeeded, \\\"Upkeep not needed\\\");\\n        if (!upkeepNeeded) {\\n            revert Raffle__UpkeepNotNeeded(\\n                address(this).balance,\\n                players.length,\\n                uint256(lotteryState)\\n            );\\n        }\\n        lotteryState = LotteryState.CALCULATING;\\n\\n        uint256 requestId = i_vrfcoordinator.requestRandomWords(\\n            i_keyHash,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            NUM_WORDS\\n        );\\n        emit requestLotteryWinner(requestId);\\n    }\\n\\n    function fulfillRandomWords(\\n        uint256, //**requestId\\n        uint256[] memory randomWords\\n    ) internal override {\\n        uint256 winnerIndex = randomWords[0] % players.length;\\n        recentWinner = players[winnerIndex];\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        if (!callSuccess) {\\n            revert lotteryTransferFailed();\\n        }\\n        lotteryState = LotteryState.OPEN;\\n        players = new address payable[](0);\\n        lastTimeStamp = block.timestamp;\\n        emit winnerPicked(recentWinner);\\n    }\\n\\n    function getEntraceFee() public view returns (uint256) {\\n        return i_entranceFee;\\n    }\\n\\n    function getPlayer(uint index) public view returns (address) {\\n        return players[index];\\n    }\\n\\n    function getRecentWinner() public view returns (address) {\\n        return recentWinner;\\n    }\\n\\n    function getLotteryState() public view returns (LotteryState) {\\n        return lotteryState;\\n    }\\n\\n    function getLastTimeStamp() public view returns (uint256) {\\n        return lastTimeStamp;\\n    }\\n\\n    function getInterval() public view returns (uint256) {\\n        return i_interval;\\n    }\\n\\n    function getEntranceFee() public view returns (uint256) {\\n        return i_entranceFee;\\n    }\\n\\n    function getNumberOfPlayers() public view returns (uint256) {\\n        return players.length;\\n    }\\n}\\n\",\"keccak256\":\"0x5454d9fc53e7e28a496bb29359e8471e0de6ed848c0a97ed367aa609d695123f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b506040516200185e3803806200185e8339818101604052810190620000389190620001ad565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050508573ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508461012081815250508360c081815250508261014081815250508167ffffffffffffffff1660e08167ffffffffffffffff1660c01b815250508063ffffffff166101008163ffffffff1660e01b815250506000600160146101000a81548160ff02191690836001811115620001225762000121620002b5565b5b0217905550426002819055505050505050506200036b565b6000815190506200014b81620002e9565b92915050565b600081519050620001628162000303565b92915050565b60008151905062000179816200031d565b92915050565b600081519050620001908162000337565b92915050565b600081519050620001a78162000351565b92915050565b60008060008060008060c08789031215620001cd57620001cc620002e4565b5b6000620001dd89828a016200013a565b9650506020620001f089828a0162000168565b95505060406200020389828a0162000151565b94505060606200021689828a0162000168565b93505060806200022989828a0162000196565b92505060a06200023c89828a016200017f565b9150509295509295509295565b6000620002568262000267565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600080fd5b620002f48162000249565b81146200030057600080fd5b50565b6200030e816200025d565b81146200031a57600080fd5b50565b620003288162000287565b81146200033457600080fd5b50565b620003428162000291565b81146200034e57600080fd5b50565b6200035c81620002a1565b81146200036857600080fd5b50565b60805160601c60a05160601c60c05160e05160c01c6101005160e01c6101205161014051611470620003ee6000396000818161061b01526106c40152600081816102b4015281816106ea0152610865015260006104cf015260006104ac0152600061048b0152600061044f0152600081816102da015261032e01526114706000f3fe6080604052600436106100a75760003560e01c806391ad27b41161006457806391ad27b4146101bd578063c1af5785146101e8578063c1c244e8146101f2578063ce147cf31461021d578063e55ae4e814610248578063fd6673f514610285576100a7565b806309bc33a7146100ac5780631fe543e3146100d75780634585e33b14610100578063473f1ddc146101295780636b68c03c146101545780636e04ff0d1461017f575b600080fd5b3480156100b857600080fd5b506100c16102b0565b6040516100ce9190611076565b60405180910390f35b3480156100e357600080fd5b506100fe60048036038101906100f99190610e4f565b6102d8565b005b34801561010c57600080fd5b5061012760048036038101906101229190610d5f565b610398565b005b34801561013557600080fd5b5061013e610597565b60405161014b9190610f94565b60405180910390f35b34801561016057600080fd5b506101696105c1565b604051610176919061105b565b60405180910390f35b34801561018b57600080fd5b506101a660048036038101906101a19190610dac565b6105d8565b6040516101b4929190610fd8565b60405180910390f35b3480156101c957600080fd5b506101d26106c0565b6040516101df9190611076565b60405180910390f35b6101f06106e8565b005b3480156101fe57600080fd5b50610207610857565b6040516102149190611076565b60405180910390f35b34801561022957600080fd5b50610232610861565b60405161023f9190611076565b60405180910390f35b34801561025457600080fd5b5061026f600480360381019061026a9190610df5565b610889565b60405161027c9190610f94565b60405180910390f35b34801561029157600080fd5b5061029a6108d0565b6040516102a79190611076565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461038a57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610381929190610faf565b60405180910390fd5b61039482826108dc565b5050565b60006103b2604051806020016040528060008152506105d8565b509050806104215747600080549050600160149054906101000a900460ff1660018111156103e3576103e2611350565b5b6040517f584327aa00000000000000000000000000000000000000000000000000000000815260040161041893929190611091565b60405180910390fd5b60018060146101000a81548160ff0219169083600181111561044657610445611350565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b8152600401610510959493929190611008565b602060405180830381600087803b15801561052a57600080fd5b505af115801561053e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105629190610e22565b9050807fed81d7c6d243af55a11a80e2e1ff815881e816981f9a54d57713923bfd60966460405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600160149054906101000a900460ff16905090565b600060606000600160149054906101000a900460ff166001811115610600576105ff611350565b5b6000600181111561061457610613611350565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600254426106489190611171565b119050600080600080549050119050600080471190508280156106685750835b80156106715750805b801561067a5750815b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f0000000000000000000000000000000000000000000000000000000000000000341015610742576040517f15823fa100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561075657610755611350565b5b600160149054906101000a900460ff16600181111561077857610777611350565b5b146107af576040517fc1934d5300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f6ba87006f2c53f2d227d45b3400034f16dbf4f6842816c4880d30170f3a6a16060405160405180910390a2565b6000600254905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b600080828154811061089e5761089d61137f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050905090565b60008080549050826000815181106108f7576108f661137f565b5b602002602001015161090991906112c1565b90506000818154811061091f5761091e61137f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060003373ffffffffffffffffffffffffffffffffffffffff16476040516109b090610f7f565b60006040518083038185875af1925050503d80600081146109ed576040519150601f19603f3d011682016040523d82523d6000602084013e6109f2565b606091505b5050905080610a2d576040517fb57f99a300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600160146101000a81548160ff02191690836001811115610a5357610a52611350565b5b0217905550600067ffffffffffffffff811115610a7357610a726113ae565b5b604051908082528060200260200182016040528015610aa15781602001602082028036833780820191505090505b5060009080519060200190610ab7929190610b2a565b5042600281905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f794919b0f484b8e90b1b817ac7f880f846fbd8a9813dee2a378e820db094e3d160405160405180910390a250505050565b828054828255906000526020600020908101928215610ba3579160200282015b82811115610ba25782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b4a565b5b509050610bb09190610bb4565b5090565b5b80821115610bcd576000816000905550600101610bb5565b5090565b6000610be4610bdf846110ed565b6110c8565b90508083825260208201905082856020860282011115610c0757610c066113e7565b5b60005b85811015610c375781610c1d8882610d35565b845260208401935060208301925050600181019050610c0a565b5050509392505050565b6000610c54610c4f84611119565b6110c8565b905082815260208101848484011115610c7057610c6f6113ec565b5b610c7b84828561124e565b509392505050565b600082601f830112610c9857610c976113e2565b5b8135610ca8848260208601610bd1565b91505092915050565b60008083601f840112610cc757610cc66113e2565b5b8235905067ffffffffffffffff811115610ce457610ce36113dd565b5b602083019150836001820283011115610d0057610cff6113e7565b5b9250929050565b600082601f830112610d1c57610d1b6113e2565b5b8135610d2c848260208601610c41565b91505092915050565b600081359050610d4481611423565b92915050565b600081519050610d5981611423565b92915050565b60008060208385031215610d7657610d756113f6565b5b600083013567ffffffffffffffff811115610d9457610d936113f1565b5b610da085828601610cb1565b92509250509250929050565b600060208284031215610dc257610dc16113f6565b5b600082013567ffffffffffffffff811115610de057610ddf6113f1565b5b610dec84828501610d07565b91505092915050565b600060208284031215610e0b57610e0a6113f6565b5b6000610e1984828501610d35565b91505092915050565b600060208284031215610e3857610e376113f6565b5b6000610e4684828501610d4a565b91505092915050565b60008060408385031215610e6657610e656113f6565b5b6000610e7485828601610d35565b925050602083013567ffffffffffffffff811115610e9557610e946113f1565b5b610ea185828601610c83565b9150509250929050565b610eb4816111a5565b82525050565b610ec3816111b7565b82525050565b610ed2816111c3565b82525050565b6000610ee38261114a565b610eed8185611155565b9350610efd81856020860161125d565b610f06816113fb565b840191505092915050565b610f1a8161123c565b82525050565b6000610f2d600083611166565b9150610f388261140c565b600082019050919050565b610f4c816111e0565b82525050565b610f5b8161120e565b82525050565b610f6a81611218565b82525050565b610f7981611228565b82525050565b6000610f8a82610f20565b9150819050919050565b6000602082019050610fa96000830184610eab565b92915050565b6000604082019050610fc46000830185610eab565b610fd16020830184610eab565b9392505050565b6000604082019050610fed6000830185610eba565b8181036020830152610fff8184610ed8565b90509392505050565b600060a08201905061101d6000830188610ec9565b61102a6020830187610f70565b6110376040830186610f43565b6110446060830185610f61565b6110516080830184610f61565b9695505050505050565b60006020820190506110706000830184610f11565b92915050565b600060208201905061108b6000830184610f52565b92915050565b60006060820190506110a66000830186610f52565b6110b36020830185610f52565b6110c06040830184610f52565b949350505050565b60006110d26110e3565b90506110de8282611290565b919050565b6000604051905090565b600067ffffffffffffffff821115611108576111076113ae565b5b602082029050602081019050919050565b600067ffffffffffffffff821115611134576111336113ae565b5b61113d826113fb565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600061117c8261120e565b91506111878361120e565b92508282101561119a576111996112f2565b5b828203905092915050565b60006111b0826111ee565b9050919050565b60008115159050919050565b6000819050919050565b60008190506111db8261140f565b919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b6000611247826111cd565b9050919050565b82818337600083830152505050565b60005b8381101561127b578082015181840152602081019050611260565b8381111561128a576000848401525b50505050565b611299826113fb565b810181811067ffffffffffffffff821117156112b8576112b76113ae565b5b80604052505050565b60006112cc8261120e565b91506112d78361120e565b9250826112e7576112e6611321565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b50565b600281106114205761141f611350565b5b50565b61142c8161120e565b811461143757600080fd5b5056fea26469706673582212204305edac8e16edfab97f10482b77b304d54fce33aff4589612daf49dc248b0f764736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106100a75760003560e01c806391ad27b41161006457806391ad27b4146101bd578063c1af5785146101e8578063c1c244e8146101f2578063ce147cf31461021d578063e55ae4e814610248578063fd6673f514610285576100a7565b806309bc33a7146100ac5780631fe543e3146100d75780634585e33b14610100578063473f1ddc146101295780636b68c03c146101545780636e04ff0d1461017f575b600080fd5b3480156100b857600080fd5b506100c16102b0565b6040516100ce9190611076565b60405180910390f35b3480156100e357600080fd5b506100fe60048036038101906100f99190610e4f565b6102d8565b005b34801561010c57600080fd5b5061012760048036038101906101229190610d5f565b610398565b005b34801561013557600080fd5b5061013e610597565b60405161014b9190610f94565b60405180910390f35b34801561016057600080fd5b506101696105c1565b604051610176919061105b565b60405180910390f35b34801561018b57600080fd5b506101a660048036038101906101a19190610dac565b6105d8565b6040516101b4929190610fd8565b60405180910390f35b3480156101c957600080fd5b506101d26106c0565b6040516101df9190611076565b60405180910390f35b6101f06106e8565b005b3480156101fe57600080fd5b50610207610857565b6040516102149190611076565b60405180910390f35b34801561022957600080fd5b50610232610861565b60405161023f9190611076565b60405180910390f35b34801561025457600080fd5b5061026f600480360381019061026a9190610df5565b610889565b60405161027c9190610f94565b60405180910390f35b34801561029157600080fd5b5061029a6108d0565b6040516102a79190611076565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461038a57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610381929190610faf565b60405180910390fd5b61039482826108dc565b5050565b60006103b2604051806020016040528060008152506105d8565b509050806104215747600080549050600160149054906101000a900460ff1660018111156103e3576103e2611350565b5b6040517f584327aa00000000000000000000000000000000000000000000000000000000815260040161041893929190611091565b60405180910390fd5b60018060146101000a81548160ff0219169083600181111561044657610445611350565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b8152600401610510959493929190611008565b602060405180830381600087803b15801561052a57600080fd5b505af115801561053e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105629190610e22565b9050807fed81d7c6d243af55a11a80e2e1ff815881e816981f9a54d57713923bfd60966460405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600160149054906101000a900460ff16905090565b600060606000600160149054906101000a900460ff166001811115610600576105ff611350565b5b6000600181111561061457610613611350565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600254426106489190611171565b119050600080600080549050119050600080471190508280156106685750835b80156106715750805b801561067a5750815b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f0000000000000000000000000000000000000000000000000000000000000000341015610742576040517f15823fa100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561075657610755611350565b5b600160149054906101000a900460ff16600181111561077857610777611350565b5b146107af576040517fc1934d5300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f6ba87006f2c53f2d227d45b3400034f16dbf4f6842816c4880d30170f3a6a16060405160405180910390a2565b6000600254905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b600080828154811061089e5761089d61137f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050905090565b60008080549050826000815181106108f7576108f661137f565b5b602002602001015161090991906112c1565b90506000818154811061091f5761091e61137f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060003373ffffffffffffffffffffffffffffffffffffffff16476040516109b090610f7f565b60006040518083038185875af1925050503d80600081146109ed576040519150601f19603f3d011682016040523d82523d6000602084013e6109f2565b606091505b5050905080610a2d576040517fb57f99a300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600160146101000a81548160ff02191690836001811115610a5357610a52611350565b5b0217905550600067ffffffffffffffff811115610a7357610a726113ae565b5b604051908082528060200260200182016040528015610aa15781602001602082028036833780820191505090505b5060009080519060200190610ab7929190610b2a565b5042600281905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f794919b0f484b8e90b1b817ac7f880f846fbd8a9813dee2a378e820db094e3d160405160405180910390a250505050565b828054828255906000526020600020908101928215610ba3579160200282015b82811115610ba25782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b4a565b5b509050610bb09190610bb4565b5090565b5b80821115610bcd576000816000905550600101610bb5565b5090565b6000610be4610bdf846110ed565b6110c8565b90508083825260208201905082856020860282011115610c0757610c066113e7565b5b60005b85811015610c375781610c1d8882610d35565b845260208401935060208301925050600181019050610c0a565b5050509392505050565b6000610c54610c4f84611119565b6110c8565b905082815260208101848484011115610c7057610c6f6113ec565b5b610c7b84828561124e565b509392505050565b600082601f830112610c9857610c976113e2565b5b8135610ca8848260208601610bd1565b91505092915050565b60008083601f840112610cc757610cc66113e2565b5b8235905067ffffffffffffffff811115610ce457610ce36113dd565b5b602083019150836001820283011115610d0057610cff6113e7565b5b9250929050565b600082601f830112610d1c57610d1b6113e2565b5b8135610d2c848260208601610c41565b91505092915050565b600081359050610d4481611423565b92915050565b600081519050610d5981611423565b92915050565b60008060208385031215610d7657610d756113f6565b5b600083013567ffffffffffffffff811115610d9457610d936113f1565b5b610da085828601610cb1565b92509250509250929050565b600060208284031215610dc257610dc16113f6565b5b600082013567ffffffffffffffff811115610de057610ddf6113f1565b5b610dec84828501610d07565b91505092915050565b600060208284031215610e0b57610e0a6113f6565b5b6000610e1984828501610d35565b91505092915050565b600060208284031215610e3857610e376113f6565b5b6000610e4684828501610d4a565b91505092915050565b60008060408385031215610e6657610e656113f6565b5b6000610e7485828601610d35565b925050602083013567ffffffffffffffff811115610e9557610e946113f1565b5b610ea185828601610c83565b9150509250929050565b610eb4816111a5565b82525050565b610ec3816111b7565b82525050565b610ed2816111c3565b82525050565b6000610ee38261114a565b610eed8185611155565b9350610efd81856020860161125d565b610f06816113fb565b840191505092915050565b610f1a8161123c565b82525050565b6000610f2d600083611166565b9150610f388261140c565b600082019050919050565b610f4c816111e0565b82525050565b610f5b8161120e565b82525050565b610f6a81611218565b82525050565b610f7981611228565b82525050565b6000610f8a82610f20565b9150819050919050565b6000602082019050610fa96000830184610eab565b92915050565b6000604082019050610fc46000830185610eab565b610fd16020830184610eab565b9392505050565b6000604082019050610fed6000830185610eba565b8181036020830152610fff8184610ed8565b90509392505050565b600060a08201905061101d6000830188610ec9565b61102a6020830187610f70565b6110376040830186610f43565b6110446060830185610f61565b6110516080830184610f61565b9695505050505050565b60006020820190506110706000830184610f11565b92915050565b600060208201905061108b6000830184610f52565b92915050565b60006060820190506110a66000830186610f52565b6110b36020830185610f52565b6110c06040830184610f52565b949350505050565b60006110d26110e3565b90506110de8282611290565b919050565b6000604051905090565b600067ffffffffffffffff821115611108576111076113ae565b5b602082029050602081019050919050565b600067ffffffffffffffff821115611134576111336113ae565b5b61113d826113fb565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600061117c8261120e565b91506111878361120e565b92508282101561119a576111996112f2565b5b828203905092915050565b60006111b0826111ee565b9050919050565b60008115159050919050565b6000819050919050565b60008190506111db8261140f565b919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b6000611247826111cd565b9050919050565b82818337600083830152505050565b60005b8381101561127b578082015181840152602081019050611260565b8381111561128a576000848401525b50505050565b611299826113fb565b810181811067ffffffffffffffff821117156112b8576112b76113ae565b5b80604052505050565b60006112cc8261120e565b91506112d78361120e565b9250826112e7576112e6611321565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b50565b600281106114205761141f611350565b5b50565b61142c8161120e565b811461143757600080fd5b5056fea26469706673582212204305edac8e16edfab97f10482b77b304d54fce33aff4589612daf49dc248b0f764736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 218,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "players",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 220,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "recentWinner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 223,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "lotteryState",
        "offset": 20,
        "slot": "1",
        "type": "t_enum(LotteryState)198"
      },
      {
        "astId": 225,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "lastTimeStamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_enum(LotteryState)198": {
        "encoding": "inplace",
        "label": "enum Lottery.LotteryState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}